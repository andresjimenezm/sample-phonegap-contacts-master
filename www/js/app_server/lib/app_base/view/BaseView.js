// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require, exports, module) {
    var BaseController, BaseView, Util, backbone,
      _this = this;
    backbone = require('backbone');
    BaseController = require('app_base/controller/BaseController');
    Util = require("util/Util");
    BaseView = Backbone.View.extend({
      debug: true,
      type: 'view',
      name: null,
      autoRender: false,
      rendered: false,
      model: {},
      appSettings: {},
      initialize: function(options) {
        var AppRouter;
        if (options == null) {
          options = {
            el: "body",
            callback: this.initApp,
            appSettings: void 0,
            config_file: void 0
          };
        }
        this.options = options;
        this.el = this.options.el;
        this.uid = 'app_view_' + this.cid;
        this.name = this.name || this.constructor.name;
        window[this.uid] = this;
        this.callback = this.initApp;
        if (options.callback !== void 0) {
          this.callback = this.options.callback;
        }
        if (options.appSettings !== void 0) {
          this.appSettings = options.appSettings;
        }
        if (options.config_file !== void 0) {
          this.config_file = options.config_file;
        }
        this.isOnTouchDevice = this.checkForTouchDevice();
        if (this.isOnTouchDevice) {
          require(["util/fastclick.min"], function(FastClick) {
            return new FastClick(document.body);
          });
        }
        AppRouter = Backbone.Router.extend({
          routes: {
            "*hashtag": "defaultRoute"
          }
        });
        this.util = Util;
        this.app_router = new AppRouter;
        this.controller = new BaseController({
          view: this,
          callback: this.callback,
          config_file: this.config_file,
          cid: this.cid
        });
        window.console = window.console || (function() {
          var c;
          c = {};
          c.log = c.warn = c.debug = c.info = c.error = c.time = c.dir = c.profile = c.clear = c.exception = c.trace = c.assert = function() {};
          return c;
        })();
        $(window).bind('resize', this.onResize);
        if (this.debug === true) {
          this.startDebugging();
        }
        if (this.autoRender === true) {
          this.render();
        }
        return this.trigger("" + this.cid + ":initialize", this);
      },
      render: function() {
        this.trigger("" + this.cid + ":render:before", this);
        this.$el.attr('data-cid', this.cid);
        this.rendered = true;
        this.trigger("" + this.cid + ":render:after", this);
        return this;
      },
      setModel: function(model) {
        return this.model = model;
      },
      getRenderData: function() {
        var _ref;
        return (_ref = this.model) != null ? _ref.toJSON() : void 0;
      },
      isOnline: function() {
        if (window.navigator.onLine) {
          return true;
        } else {
          return false;
        }
      },
      showSpinner: function($el) {
        if ($el == null) {
          $el = $('.spinner');
        }
        return $('.spinner').delay(200).show();
      },
      hideSpinner: function($el) {
        if ($el == null) {
          $el = $('.spinner');
        }
        $('html').css('background', 'url()');
        return $('.spinner').hide();
      },
      onResize: function(e) {},
      destroy: function(keepDOM) {
        var _ref;
        if (keepDOM == null) {
          keepDOM = false;
        }
        this.trigger("" + this.cid + ":destroy:before", this);
        if (keepDOM) {
          this.dispose();
        } else {
          this.remove();
        }
        if ((_ref = this.model) != null) {
          _ref.destroy();
        }
        return this.trigger("" + this.cid + ":destroy:after", this);
      },
      startDebugging: function() {
        this.on("" + this.cid + ":initialize", function() {
          return console.log("Initialized " + this.name, this);
        });
        this.on("" + this.cid + ":render", function() {
          return console.log("Rendered " + this.name, this);
        });
        this.on("" + this.cid + ":update", function() {
          return console.log("Updated " + this.name, this);
        });
        return this.on("" + this.cid + ":destroy", function() {
          return console.log("Destroyed " + this.name, this);
        });
      },
      checkForTouchDevice: function() {
        var _ref;
        return (_ref = typeof window.ontouchstart !== 'undefined') != null ? _ref : {
          "true": false
        };
      },
      getJSON: function(url, callback) {
        return this.controller.getJSON(url, callback);
      },
      getJSONP: function(url, callback) {
        _this = _this;
        return $.ajax({
          url: url,
          dataType: "jsonp",
          cache: true,
          jsonpCallback: "JsonWrapping",
          success: function(result) {
            return callback.call(_this, result);
          },
          error: function(a, b, c) {
            return console.log("jsonp load failed: " + url);
          }
        });
      },
      getXML: function(url, callback) {
        return $.ajax({
          type: "GET",
          url: url,
          dataType: "xml",
          success: function(xml) {
            return callback.call(this, xml);
          }
        });
      },
      loadIframe: function(url, $target, w, h, callback) {
        var $iframe, id;
        id = 'iframe-' + String(Math.random()).substring(6);
        $target.html('<iframe class="iframe-wrapper" id="' + id + '" name="' + id + '" marginwidth="0px" marginheight="0px"></iframe>');
        $target.css('margin', 0).css('padding', 0);
        $iframe = $("#" + id);
        $iframe.attr("width", w).attr("height", h).attr("frameborder", "0").attr("src", url).attr("allowTransparency", "true");
        $iframe.attr('sandbox', 'allow-same-origin allow-scripts allow-top-navigation allow-forms');
        $iframe.css("visibility", "hidden").css('margin', 0).css('padding', 0);
        return $iframe.load(function() {
          var iframe;
          $iframe.css("visibility", "visible");
          iframe = null;
          if (url.match(window.document.location.host) || !url.match('http')) {
            iframe = $iframe[0].contentWindow.document || $iframe[0].contentDocument;
          }
          return callback.call(this, iframe, id);
        });
      },
      log: function(args) {
        if (this.appSettings.debug === true) {
          return window.console.log(args);
        }
      },
      html: function(dom) {
        this.$el.html(dom);
        this.trigger("" + this.cid + ":" + (this.rendered ? 'update' : 'render'), this);
        return this.$el;
      },
      append: function(dom) {
        this.$el.append(dom);
        this.trigger("" + this.cid + ":" + (this.rendered ? 'update' : 'render'), this);
        return this.$el;
      },
      prepend: function(dom) {
        this.$el.prepend(dom);
        this.trigger("" + this.cid + ":" + (this.rendered ? 'update' : 'render'), this);
        return this.$el;
      },
      after: function(dom) {
        this.$el.after(dom);
        this.trigger("" + this.cid + ":update", this);
        return this.$el;
      },
      before: function(dom) {
        this.$el.after(dom);
        this.trigger("" + this.cid + ":update", this);
        return this.$el;
      },
      css: function(css) {
        this.$el.css(css);
        this.trigger("" + this.cid + ":update", this);
        return this.$el;
      },
      find: function(selector) {
        return this.$el.find(selector);
      },
      delegate: function(event, selector, handler) {
        if (arguments.length === 2) {
          handler = selector;
        }
        handler = handler.bind(this);
        if (arguments.length === 2) {
          return this.$el.on(event, handler);
        } else {
          return this.$el.on(event, selector, handler);
        }
      }
    });
    return module.exports = BaseView;
  });

}).call(this);
