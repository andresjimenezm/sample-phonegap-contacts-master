// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var BaseView, DrupalAppView, self;
    BaseView = require('app_base/view/BaseView');
    self = {};
    return module.exports = DrupalAppView = (function(_super) {

      __extends(DrupalAppView, _super);

      function DrupalAppView() {
        return DrupalAppView.__super__.constructor.apply(this, arguments);
      }

      DrupalAppView.prototype.initService = function(callback) {
        self = this;
        this.callback = callback;
        this.domain = this.appSettings.domain;
        this.subdomain = this.appSettings.domain;
        if (this.domain.match("www.")) {
          this.subdomain = "default";
        }
        this.app_root = document.location.href.substring(0, document.location.href.lastIndexOf('/')) + "/";
        if (this.appSettings.app_root !== void 0) {
          this.app_root = this.appSettings.app_root;
        }
        this.baseURL = this.app_root;
        if (this.appSettings.online === true) {
          this.baseURL = "http://" + this.domain + "/sites/" + this.subdomain + "/modules/app_client/www/";
        }
        this.appSettings.baseURL = this.baseURL;
        this.online = this.appSettings.online;
        if (this.online === true) {
          this.log("live data");
          return this.getLiveSiteData(this.onLiveSiteData);
        } else {
          return this.getStaticSiteData(this.baseURL + "data/site.jsonp", this.onStaticSiteData);
        }
      };

      DrupalAppView.prototype.getLiveSiteData = function(callback) {
        self = this;
        return self.drupal.getParams(function(data) {
          return self.drupal.getMenus(self.appSettings.preload_drupal_menus.split(","), function(mids) {
            var menu, nids, p;
            nids = [];
            for (p in mids) {
              menu = self.model.menus[mids[p]];
              for (p in menu) {
                if (menu[p].link_path.match("node/")) {
                  nids.push(menu[p].link_path.split("/")[1]);
                }
              }
            }
            return self.drupal.getNodes(nids, function(data) {
              return self.drupal.getBooks(self.appSettings.preload_drupal_books.split(","), function(bids) {
                return self.drupal.getTaxonomyTrees(self.appSettings.preload_drupal_vocabularies.split(","), function(vids) {
                  return callback.call(self, self.model);
                });
              });
            });
          });
        });
      };

      DrupalAppView.prototype.getStaticSiteData = function(dataFile, callback) {
        var _this = this;
        this.appSettings.dataFile = dataFile;
        this.log('static dataFile = ' + dataFile);
        return this.getJSONP(dataFile, function(data) {
          _this.model.siteParams = data.siteParams;
          _this.model.nodes = data.nodes;
          _this.model.menus = data.menus;
          _this.model.books = data.books;
          _this.model.views = data.views;
          _this.model.vocabularies = data.vocabularies;
          return callback.call(_this, dataFile, data);
        });
      };

      DrupalAppView.prototype.onLiveSiteData = function(service_data) {
        if (this.util.queryVars().update === "site" || window.location.host.match(":8888")) {
          this.saveSiteData(service_data);
        }
        return this.callback.call(this, this.model);
      };

      DrupalAppView.prototype.onStaticSiteData = function(data) {
        self = this;
        if (self.util.queryVars().update === "site" || window.location.host.match(":8888")) {
          self.updateServerData();
        }
        return this.callback.call(self, self.model);
      };

      DrupalAppView.prototype.updateServerData = function() {
        return this.getLiveSiteData(function(service_data) {
          return this.saveSiteData(service_data);
        });
      };

      DrupalAppView.prototype.saveSiteData = function(data) {
        var url;
        self = this;
        self.drupal.saveModelToFile(data, "sites/" + self.subdomain + "/modules/app_client/wwwSource/data/site.json");
        url = 'http://' + self.domain + '/sites/all/modules/app_server/data.php';
        url += '?file_to_jsonp=sites/' + self.subdomain + '/modules/app_client/wwwSource/appsettings.json';
        return $.ajax({
          type: "GET",
          url: url,
          success: function(response) {
            return console.log(response);
          }
        });
      };

      DrupalAppView.prototype.onResize = function() {};

      DrupalAppView.prototype.onHashChange = function() {
        return console.log("hashchange :: " + window.location.hash);
      };

      return DrupalAppView;

    })(BaseView);
  });

}).call(this);
