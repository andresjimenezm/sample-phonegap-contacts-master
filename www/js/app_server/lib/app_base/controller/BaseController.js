// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require, exports, module) {
    var BaseController;
    return module.exports = BaseController = (function() {

      function BaseController(options) {
        if (options == null) {
          options = {
            el: $("body"),
            callback: this.initApp,
            config_file: 'appsettings.json'
          };
        }
        this.options = options;
        this.view = this.options.view;
        this.appSettings = this.view.appSettings;
        this.config_file = this.view.config_file;
        if (this.options.config_file !== void 0) {
          this.loadAppsettings(this.options.config_file, this.onAppsettingsLoaded);
        } else {
          window.app_context_temp = this;
          this.onAppsettingsLoaded();
        }
      }

      BaseController.prototype.onAppsettingsLoaded = function() {
        var self;
        self = window.app_context_temp;
        if (self.appSettings.cms === "drupal") {
          return require(["app_base/controller/DrupalController"], function(DrupalController) {
            var drupal;
            return drupal = new DrupalController({
              app: self.view,
              callback: self.options.callback
            });
          });
        } else {
          return self.options.callback.call(self.view, self.view);
        }
      };

      BaseController.prototype.loadAppsettings = function(url, callbackFn) {
        var dataType;
        dataType = void 0;
        window.app_context_temp = this;
        if (url.match(".json")) {
          dataType = "json";
          if (url.match(".jsonp") || url.match("data.php?file_p")) {
            window.app_context_temp.getJSONP(url, function(data) {
              var appSettings, p;
              appSettings = void 0;
              p = void 0;
              appSettings = window.app_context_temp.parseAppSettings(data.appsettings);
              for (p in appSettings) {
                window.app_context_temp.appSettings[p] = new Object();
                window.app_context_temp.appSettings[p] = appSettings[p];
              }
              return callbackFn.call(null);
            });
          } else {
            $.getJSON(url, function(data) {
              var appSettings, p;
              appSettings = void 0;
              p = void 0;
              appSettings = window.app_context_temp.parseAppSettings(data.appsettings);
              for (p in appSettings) {
                window.app_context_temp.appSettings[p] = new Object();
                window.app_context_temp.appSettings[p] = appSettings[p];
              }
              return callbackFn.call(null);
            });
          }
        }
        if (url.match(".xml")) {
          return $.ajax({
            type: "GET",
            url: url + "?" + Math.random(),
            dataType: "xml",
            success: function(xml) {
              xml = xml;
              $(xml).find("add").each(function() {
                var key, value;
                key = void 0;
                value = void 0;
                key = void 0;
                value = void 0;
                key = $(this).attr("key");
                value = $(this).attr("value");
                if (Number(value) && value !== "true" && value !== "false") {
                  value = Number(value);
                }
                if (value === "0") {
                  value = 0;
                }
                if (value === "true") {
                  value = true;
                }
                if (value === "false") {
                  value = false;
                }
                self.appSettings[key] = new Object();
                return self.appSettings[key] = value;
              });
              return callbackFn.call(null);
            }
          });
        }
      };

      BaseController.prototype.parseAppSettings = function(appsettings) {
        var key, p, pp, returnObj, tempObj, value;
        key = void 0;
        p = void 0;
        tempObj = void 0;
        value = void 0;
        tempObj = {};
        for (p in appsettings.add) {
          key = appsettings.add[p]["key"];
          value = appsettings.add[p]["value"];
          if (Number(value) && value !== "true" && value !== "false") {
            value = Number(value);
          }
          if (value === "0") {
            value = 0;
          }
          if (value === "true") {
            value = true;
          }
          if (value === "false") {
            value = false;
          }
          tempObj[key] = value;
        }
        returnObj = {};
        for (pp in tempObj) {
          returnObj[pp] = new Object();
          returnObj[pp] = tempObj[pp];
        }
        return returnObj;
      };

      BaseController.prototype.getJSON = function(url, callback) {
        return $.ajax({
          type: "GET",
          url: url,
          dataType: "json",
          succes: function(json) {
            return callback.call(this, json);
          },
          error: function(a, b, c) {
            return window.console.log("json load failed: " + url);
          }
        });
      };

      return BaseController;

    })();
  });

}).call(this);
