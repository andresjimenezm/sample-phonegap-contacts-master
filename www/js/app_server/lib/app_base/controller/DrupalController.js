// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require, exports, module) {
    var DrupalController, DrupalModel, ServiceDrupal, self, unserialize_php;
    DrupalModel = require('app_base/model/DrupalModel');
    ServiceDrupal = require('services/ServiceDrupal');
    unserialize_php = require("util/unserialize_php");
    self = {};
    return module.exports = DrupalController = (function() {

      function DrupalController(options) {
        if (options == null) {
          options = {
            app: null,
            callback: null
          };
        }
        this.getBooks = __bind(this.getBooks, this);

        this.getBook = __bind(this.getBook, this);

        this.getTaxonomyTrees = __bind(this.getTaxonomyTrees, this);

        this.getTaxonomyTree = __bind(this.getTaxonomyTree, this);

        this.getMenus = __bind(this.getMenus, this);

        this.getMenu = __bind(this.getMenu, this);

        this.getNodes = __bind(this.getNodes, this);

        this.getNode = __bind(this.getNode, this);

        this.getParams = __bind(this.getParams, this);

        this.onConnected = __bind(this.onConnected, this);

        self = this;
        this.application = options.app;
        this.application.drupal = this;
        this.application.model = new DrupalModel();
        this.model = this.application.model;
        this.appSettings = this.application.appSettings;
        this.callbackFn = options.callback;
        this.unserialize_php = unserialize_php;
        this.serviceClass = new ServiceDrupal({
          gateway: "http://" + this.appSettings.domain + "/?q=services/jsonp",
          domain: this.appSettings.domain,
          requireSession: this.appSettings.use_sessions
        });
        if (this.appSettings.online === false) {
          this.callbackFn.call(this.application, this.application);
        } else {
          this.connect();
        }
      }

      DrupalController.prototype.service = function(service_method, args, success) {
        return this.serviceClass.service(service_method, args, success);
      };

      DrupalController.prototype.connect = function() {
        var _this = this;
        if (this.appSettings.use_sessions !== true) {
          return this.getParams(this.onConnected);
        } else {
          return this.serviceClass.connect(function(data) {
            _this.model.user = data.user;
            _this.model.sessid = data.sessid;
            return _this.getParams(_this.onConnected);
          });
        }
      };

      DrupalController.prototype.onConnected = function(data) {
        return this.callbackFn.call(this.application, this.application);
      };

      DrupalController.prototype.getParams = function(callback) {
        var model;
        model = this.model;
        return this.serviceClass.service("site.getParams", {}, function(data) {
          model.siteParams = data;
          return callback.call(this.application, data);
        });
      };

      DrupalController.prototype.getNode = function(nid, callback) {
        var model;
        model = this.model;
        return this.serviceClass.service("node.get", {
          nid: nid
        }, function(data) {
          model.nodes[data.nid] = data;
          return callback.call(this.application, data);
        });
      };

      DrupalController.prototype.getNodes = function(nids, callback) {
        var model;
        model = this.model;
        return this.serviceClass.service("site.getNodes", {
          nids: nids
        }, function(data) {
          var p, _i, _len;
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            p = data[_i];
            if (p !== void 0) {
              model.nodes[p.nid] = p;
            }
          }
          return callback.call(this.application, data);
        });
      };

      DrupalController.prototype.getMenu = function(mid, callback) {
        var _this = this;
        return this.serviceClass.service("menu.get", {
          menu_id: mid,
          fields: void 0
        }, function(data) {
          _this.application.model.menus[mid] = new Object(data);
          return callback.call(_this.application, data, mid);
        });
      };

      DrupalController.prototype.getMenus = function(mids, callback, preload_nodes) {
        var i, p, _results;
        if (preload_nodes == null) {
          preload_nodes = true;
        }
        i = 0;
        _results = [];
        for (p in mids) {
          _results.push(this.getMenu(mids[p], function(data, mid) {
            if (i === mids.length - 1) {
              callback.call(this.application, mids);
            }
            return i++;
          }));
        }
        return _results;
      };

      DrupalController.prototype.getTaxonomyTree = function(vid, callback) {
        var _this = this;
        return this.serviceClass.service("taxonomy.getTree", {
          'vid': vid,
          'parent': void 0,
          'max_depth': void 0
        }, function(data) {
          _this.application.model.vocabularies[vid] = new Object(data);
          return callback.call(_this.application, data, vid);
        });
      };

      DrupalController.prototype.getTaxonomyTrees = function(vids, callback) {
        var i, p, _results;
        i = 0;
        _results = [];
        for (p in vids) {
          _results.push(this.getTaxonomyTree(vids[p], function(data) {
            if (i === vids.length - 1) {
              callback.call(this.application, vids);
            }
            return i++;
          }));
        }
        return _results;
      };

      DrupalController.prototype.getBook = function(bid, callback) {
        var model, nids, node, nodesData, service;
        nids = [];
        nodesData = {};
        node = {};
        model = this.model;
        service = this.serviceClass;
        return this.serviceClass.service("site.getBook", {
          bid: bid
        }, function(data) {
          var below, book, k, kk, kkk, nid;
          book = data;
          model.books[bid] = book;
          nids.push(bid);
          for (k in book) {
            below = book[k].below;
            for (kk in below) {
              nids.push(Number(below[kk].link.href.split("/")[1]));
              for (kkk in below[kk].below) {
                nid = Number(below[kk].below[kkk].link.href.split("/")[1]);
                nids.push(nid);
              }
            }
          }
          return service.service("site.getNodes", {
            nids: nids
          }, function(nodesData) {
            for (node in nodesData) {
              model.nodes[nodesData[node].nid] = nodesData[node];
            }
            return callback.call(this.application);
          });
        });
      };

      DrupalController.prototype.getBooks = function(bids, callback) {
        var i, p, _results;
        i = 0;
        _results = [];
        for (p in bids) {
          _results.push(this.getBook(bids[p], function() {
            if (i === bids.length - 1) {
              callback.call(this.application, bids);
            }
            return i++;
          }));
        }
        return _results;
      };

      DrupalController.prototype.parseNodeBody = function(body) {
        return "" + body.replace(/(\r\n|\n|\r)/g, "<br>") + "";
      };

      DrupalController.prototype.saveModelToFile = function(model, file) {
        var data, domain, subdomain, url;
        domain = self.appSettings.domain;
        subdomain = self.appSettings.domain;
        if (domain.match("www.")) {
          subdomain = "default";
        }
        url = file;
        data = {};
        data.siteParams = model.siteParams;
        data.nodes = model.nodes;
        data.books = model.books;
        data.views = model.views;
        data.menus = model.menus;
        data.vocabularies = model.vocabularies;
        return $.post("http://" + domain + "/sites/all/modules/app_server/data.php", {
          data: {
            json: JSON.stringify(data),
            file: url
          }
        }, (function(returnObj) {
          return console.log("data written:" + returnObj);
        }), "json", false);
      };

      DrupalController.prototype.getBookLinks = function(data) {
        var below, gridData, item, k, kk, link;
        gridData = [];
        for (k in data) {
          below = data[k].below;
        }
        for (k in below) {
          item = {};
          for (kk in below[k]) {
            link = below[k].link;
            item = this.application.model.nodes[Number(link.href.split("/")[1])];
          }
          gridData.push(item);
        }
        return gridData;
      };

      return DrupalController;

    })();
  });

}).call(this);
