// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require, exports, module) {
    var MediaController, createJs, self;
    module.exports = MediaController;
    createJs = require(['createjs/preloadjs-0.2.0.min', 'createjs/soundjs-0.3.0.min']);
    self = {};
    return MediaController = (function() {

      function MediaController(options) {
        if (options == null) {
          options = {
            app: null,
            preload_manifest: void 0,
            callback: null,
            media_root: ''
          };
        }
        this.onAssetsLoaded = __bind(this.onAssetsLoaded, this);

        this.preloadAssets = __bind(this.preloadAssets, this);

        this.loadEaselComp = __bind(this.loadEaselComp, this);

        this.init = __bind(this.init, this);

        self = this;
        this.options = options;
        this.media_root = options.media_root;
        this.edgeComps = [];
        this.loadedEdgeComps = [];
        this.easelComps = [];
        this.loadedEaselComps = [];
        this.images = {};
        this.sounds = {};
        this.xml = {};
        this.json = {};
        this.app = options.app;
        this.init();
      }

      MediaController.prototype.init = function() {
        if (window.images === void 0) {
          window.images = {};
        }
        if (window.sounds === void 0) {
          window.sounds = {};
        }
        if (self.options.preload_manifest !== void 0 && self.options.preload_manifest.length !== 0) {
          return self.preloadAssets(self.options.preload_manifest, self.options.callback);
        } else {
          return self.options.callback.call(null, self);
        }
      };

      MediaController.prototype.loadEdgeComp = function($el, compId, callback) {
        var edgejs;
        $el.html("<div class=\"edge-wrapper\"><div id=\"Stage_" + compId + "\" class=\"" + compId + "\"></div></div>");
        $(".edgeLoad-" + compId).css({
          display: "none"
        });
        edgejs = this.media_root + compId + "_edgePreload.js";
        return require([edgejs], function() {
          return AdobeEdge.bootstrapCallback(function(compId) {
            console.log('# edge bootstrapCallback :: ' + AdobeEdge.getComposition(compId) + '  : sym=' + document.sym);
            if (self.loadedEdgeComps[compId] === void 0) {
              self.loadedEdgeComps[compId] = AdobeEdge.getComposition(compId);
            }
            return callback.call(self, document.sym, compId);
          });
        });
      };

      MediaController.prototype.loadEaselComp = function($el, compId, callback, stagewidth, stageheight, media_root) {
        var preload;
        if (media_root == null) {
          media_root = '';
        }
        $el.html("<div class=\"easel-wrapper\"><canvas id=\"canvas_" + compId + "\" class=\"" + compId + "\"></canvas></div>");
        preload = this.media_root + compId + ".js";
        return require([preload], function() {
          var canvas, exportRoot, stage;
          canvas = document.getElementById("canvas_" + compId);
          exportRoot = new lib[compId]();
          stage = new createjs.Stage(canvas);
          stage.addChild(exportRoot);
          stage.update();
          createjs.Ticker.setFPS(24);
          createjs.Ticker.addListener(stage);
          return callback.call(self.app, compId, exportRoot, stagewidth, stageheight);
        });
      };

      MediaController.prototype.loadIframe = function(url, $target, w, h, callback) {
        var $iframe, id;
        id = 'iframe-' + String(Math.random()).substring(6);
        $target.html('<iframe class="iframe-wrapper" id="' + id + '" name="' + id + '" marginwidth="0px" marginwheight="0px"></iframe>');
        $target.css('margin', 0).css('padding', 0);
        $iframe = $("#" + id);
        $iframe.attr("width", w).attr("height", h).attr("frameborder", "0").attr("src", url);
        $iframe.css("visibility", "hidden").css('margin', 0).css('padding', 0);
        return $iframe.load(function() {
          var iframe;
          $iframe.css("visibility", "visible");
          iframe = null;
          if (url.match(window.document.location.host) || !url.match('http')) {
            iframe = $iframe[0].contentWindow.document || $iframe[0].contentDocument;
          }
          return callback.call(null, iframe, id);
        });
      };

      MediaController.prototype.preloadAssets = function(manifest, callback) {
        var loader, p;
        if (manifest.length === 0) {
          callback.call(self, self);
          return;
        }
        for (p in manifest) {
          manifest[p].src = self.media_root + manifest[p].src;
        }
        loader = new createjs.PreloadJS(false);
        loader.installPlugin(createjs.SoundJS);
        loader.onFileLoad = self.handleFileLoad;
        loader.onComplete = this.onAssetsLoaded;
        return loader.loadManifest(manifest);
      };

      MediaController.prototype.onAssetsLoaded = function() {
        return self.options.callback.call(null, self);
      };

      MediaController.prototype.handleFileLoad = function(o) {
        if (o.type === "image") {
          window.images[o.id] = self.images[o.id] = o.result;
        }
        if (o.type === "sound") {
          return window.sounds[o.id] = self.sounds[o.id] = o.result;
        }
      };

      MediaController.prototype.playSound = function(name, loops) {
        return createjs.SoundJS.play(name, createjs.SoundJS.INTERRUPT_EARLY, 0, 0, loops);
      };

      /*extendCreateJs: ->
        window.createjs.Bitmap::setWidth = (w) ->
          return  if @image.width is 0
          @scaleX = w / @image.width
        window.createjs.Bitmap::setHeight = (h) ->
          return  if @image.height is 0
          @scaleY = h / @image.height
        window.createjs.MovieClip.prototype.move = (x, y) ->
          @x = x
          @y = y
        window.createjs.MovieClip.prototype.hide = (time=0.3) ->
          TweenLite.to(@,time,{alpha:0,onComplete: -> this.visible=false})
      */


      return MediaController;

    })();
  });

}).call(this);
