// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(function(require, exports, module) {
    var BaseModel, backbone;
    backbone = require('backbone');
    return module.exports = BaseModel = (function(_super) {

      __extends(BaseModel, _super);

      function BaseModel() {
        return BaseModel.__super__.constructor.apply(this, arguments);
      }

      BaseModel.prototype.defaults = {
        name: 'baseModel'
      };

      BaseModel.prototype.initialize = function() {
        return console.log("BaseModel :: initialize");
      };

      BaseModel.prototype.setSilent = function(attributes) {
        return this.set(attributes, {
          silent: true
        });
      };

      BaseModel.prototype.push = function() {
        var attr, attribute, obj, values;
        attribute = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        obj = {};
        attr = this.get(attribute);
        attr.push.apply(attr, values);
        obj[attribute] = attr;
        return this.set(obj);
      };

      BaseModel.prototype.pop = function(attribute) {
        var attr, obj;
        obj = {};
        attr = this.get(attribute);
        attr.pop();
        obj[attribute] = attr;
        return this.set(obj);
      };

      BaseModel.prototype.reverse = function(attribute) {
        var attr, obj;
        obj = {};
        attr = this.get(attribute);
        attr.reverse();
        obj[attribute] = attr;
        return this.set(obj);
      };

      BaseModel.prototype.shift = function(attribute) {
        var attr, obj;
        obj = {};
        attr = this.get(attribute);
        attr.shift();
        obj[attribute] = attr;
        return this.set(obj);
      };

      BaseModel.prototype.unshift = function() {
        var attr, attribute, obj, values;
        attribute = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        obj = {};
        attr = this.get(attribute);
        attr.unshift.apply(attr, values);
        obj[attribute] = attr;
        return this.set(obj);
      };

      BaseModel.prototype.splice = function() {
        var attr, attribute, obj, values;
        attribute = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        obj = {};
        attr = this.get(attribute);
        attr.splice.apply(attr, values);
        obj[attribute] = attr;
        return this.set(obj);
      };

      BaseModel.prototype.add = function() {
        var attr, attribute, obj, value, values, _i, _len;
        attribute = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        obj = {};
        attr = this.get(attribute);
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          value = values[_i];
          attr += value;
        }
        obj[attribute] = attr;
        return this.set(obj);
      };

      BaseModel.prototype.subtract = function() {
        var attr, attribute, obj, value, values, _i, _len;
        attribute = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        obj = {};
        attr = this.get(attribute);
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          value = values[_i];
          attr -= value;
        }
        obj[attribute] = attr;
        return this.set(obj);
      };

      BaseModel.prototype.divide = function() {
        var attr, attribute, obj, value, values, _i, _len;
        attribute = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        obj = {};
        attr = this.get(attribute);
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          value = values[_i];
          attr /= value;
        }
        obj[attribute] = attr;
        return this.set(obj);
      };

      BaseModel.prototype.multiply = function() {
        var attr, attribute, obj, value, values, _i, _len;
        attribute = arguments[0], values = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        obj = {};
        attr = this.get(attribute);
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          value = values[_i];
          attr *= value;
        }
        obj[attribute] = attr;
        return this.set(obj);
      };

      return BaseModel;

    })(Backbone.Model);
  });

}).call(this);
