// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require, exports, module) {
    var ServiceDrupal;
    return module.exports = ServiceDrupal = (function() {

      function ServiceDrupal(options) {
        this.options = options;
        this.gateway = options.gateway;
        this._domain = options.domain;
        this._sessid;
        this._requireSession = options.requireSession;
        this._key = options.key;
        this._allowed_domain = options.allowed_domain;
        this._serviceArgs = "&callback=?";
      }

      ServiceDrupal.prototype.service = function(service_method, args, success) {
        var args_done, i, query, self;
        self = this;
        args = $.extend({
          method: service_method
        }, args);
        args_done = {};
        for (i in args) {
          args_done[i] = self.toJsonp(args[i]);
        }
        if (this._requireSession === true && this._sessid !== "") {
          args_done["sessid"] = this._sessid;
        }
        args_done["callback"] = "?";
        query = "";
        for (i in args_done) {
          query += "&" + i + "=" + String(args_done[i]).replace(/"/g, "");
        }
        return $.ajax({
          type: "GET",
          url: self.gateway + query,
          dataType: "json",
          success: function(response) {
            if (response.status) {
              return success(response.data);
            } else {
              return self.onServiceError(response);
            }
          },
          error: this.onServiceError
        });
      };

      ServiceDrupal.prototype.connect = function(callback) {
        var self;
        self = this;
        return self.service("system.connect", {}, function(data) {
          self.sessid = data.sessid;
          if (self._requireSession === true) {
            self._sessid = data.sessid;
            self._serviceArgs = "&sessid=" + data.sessid + "&callback=?";
          } else {
            self._serviceArgs = "&callback=?";
          }
          return callback.call(self, data);
        });
      };

      ServiceDrupal.prototype.siteGetParams = function(callback) {
        return this.service("site.getParams", {}, function(data) {
          return callback.call(this, data);
        });
      };

      ServiceDrupal.prototype.siteGetNodes = function(nids, callback) {
        return this.service("site.getNodes", {
          nids: nids
        }, callback);
      };

      ServiceDrupal.prototype.nodeGet = function(nid, callback) {
        return this.service("node.get", {
          nid: nid
        }, callback);
      };

      ServiceDrupal.prototype.nodesGet = function(nids, callback) {
        return this.service("site.getNodes", {
          nids: nids
        }, callback);
      };

      ServiceDrupal.prototype.menuGet = function(mid, callback) {
        return this.service("menu.get", {
          mid: mid
        }, function(data) {
          return callback.call(this, data, mid);
        });
      };

      ServiceDrupal.prototype.viewsGet = function(view_name, fields, callback) {
        return this.service("views.get", {
          view_name: view_name
        }, function(data) {
          return callback.call(this, data, view_name);
        });
      };

      ServiceDrupal.prototype.bookGet = function(bid, callback) {
        return this.service("site.getBook", {
          bid: bid
        }, function(data) {
          return callback.call(this, data, bid);
        });
      };

      ServiceDrupal.prototype.toJsonp = function(v) {
        var i, output, self;
        self = this;
        switch (typeof v) {
          case "boolean":
            if (v === true) {
              return "TRUE";
            } else {
              return "FALSE";
            }
          case "number":
            return v;
          case "string":
            return "\"" + v + "\"";
          case "object":
            if (Object.prototype.toString.call(v) === "[object Array]") {
              return "[" + v + "]";
            }
            output = "{";
            for (i in v) {
              output = output + i + ":" + self.toJsonp(v[i]) + ",";
            }
            output = output + "}";
            return output;
          default:
            return "null";
        }
      };

      ServiceDrupal.prototype.onServiceError = function(response) {
        this.error = response["data"];
        console.log("ERROR :: ServiceDrupal :: " + this.error);
        return $(this).trigger("error");
      };

      return ServiceDrupal;

    })();
  });

}).call(this);
